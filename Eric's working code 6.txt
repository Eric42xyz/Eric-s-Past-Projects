#include <asf.h>

void clock_setup(void);
void wait(volatile int d);
void port_setup(void);
void timer_setup_1(void);
void timer_setup_2(void);
void timer_setup_3(void);
void timer_setup_4(void);
void timer_setup_5(void);
void timer_setup_6(void);
void ADC_setup(void);
void convert(void);
void generate_PWM(void);
int PWM_math(float dist, short direction);

volatile int result;
volatile int ref_ADC_value = 2800;//12 bit value
volatile int R1 = 1000; //units (ohm)
volatile float mm_per_OHM1 = .024;//.02693;
volatile float distance; // units (mm)
volatile float distance1; // units (mm)
volatile int PWM_value1;
volatile int p = 48;

//////////////////////////////////////////////////////////////////////////
//Eric's constant variables used for ease of access.
const int dead = 5;
const int push = 0x20;
const int pull = 0x12;

const int push1 = 0x32;	//push magnet 1. 1 and 2 on these are just to symbolize which magnet the coil's force is acting on; disable any at will.
const int push2 = 0x0;	//push magnet 2
const int pull1 = 0x0;	//pull magnet 1
const int pull2 = 0x32;	//pull magnet 2
const int play = 0x30;
const int off = 0x19; //off state

const short push_cmd1 = 0;//0
const short push_cmd2 = 1;//1
const short pull_cmd1 = 1;//1
const short pull_cmd2 = 0;//0
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//Eric's Inversion Table.
const int scale = 0x19;
//const int pull = 1;
//const int push = 0;
const float table[48] = 
{
1.000055003,
0.94410787,
0.888206746,
0.833379169,
0.767087644,
0.729769867,
0.692345771,
0.661801105,
0.594746367,
0.555586113,
0.523284595,
0.496350829,
0.451529851,
0.42058388,
0.391325871,
0.366868004,
0.344406697,
0.319922809,
0.298029637,
0.28126547,
0.262150341,
0.249091191,
0.235204574,
0.22278453,
0.209313838,
0.197379277,
0.184941679,
0.179531151,
0.170463921,
0.169820661,
0.170679425,
0.166470315,
0.164643202,
0.16424261,
0.166470315,
0.16424261,
0.167088398,
0.174428198,
0.177407918,
0.186217138,
0.19314367,
0.213281873,
0.226522526,
0.241515967,
0.27665456,
0.319922809,
0.419277719,
0.54438478,
0.798860505
};
volatile int table_int[48]={18,17,17,16,16,15,15,14,14,13,13,12,12,11,10,9,9,8,7,7,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,6,7,8,9,10};	//Theoretical best with experimental modifications
//{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,20,18,17,17,16,16,16,16,15,15,16,15,16,16,17,17,18,20,21,23,26,30,39};	//Half of the theoretical best.  Note: not great
//{18,17,17,16,16,15,15,14,14,13,13,12,12,11,10,9,9,8,7,7,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,6,7,8,9,10};	//Theoretical best with experimental modifications
//{10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};	//40%
//{18,17,17,16,16,15,15,14,14,13,13,12,12,11,10,9,9,8,7,7,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,6,7,8,9,10};	//Theoretical best with experimental modifications
//{25,23,22,21,19,18,17,16,15,14,13,12,12,11,10,9,9,8,7,7,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,6,7,8,9,10};	//Theoretical best with experimental modifications
//{25,23,22,21,19,18,17,16,15,14,13,12,12,11,10,9,9,8,7,7,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,6,6,7,10};	//theoretical best
//{2,3,5,6,8,10,11,13,14,15,16,18,19,20,21,22,22,23,24,24,25,25,25,25,25,25,25,24,24,23,22,22,21,20,19,18,16,15,14,13,11,10,8,6,5,3,2,0};	//sine curve
//{22,21,20,19,18,17,16,15,14,13,12,11,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,3,3,4,5,6,9,12,19};
//{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};	//80%
//{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};	//80%
//{10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};	//40%
//{22,21,20,19,18,17,16,15,14,13,12,11,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,3,3,4,5,6,9,12,19};
//{66,61,58,54,50,45,43,40,38,33,30,28,26,23,21,19,17,16,14,12,11,10,9,8,7,6,5,4,4,3,3,3,3,3,3,3,3,3,4,4,5,5,6,7,8,11,14,21};
//{70,65,62,58,54,49,47,44,42,37,34,32,30,27,25,23,21,20,18,16,15,14,13,12,11,10,9,8,8,7,7,7,7,7,7,7,7,7,8,8,9,9,10,11,12,15,18,25};
//{74,69,66,62,58,53,51,48,46,41,38,36,34,31,29,27,25,24,22,20,19,18,17,16,15,14,13,12,12,11,11,11,11,11,11,11,11,11,12,12,13,13,14,15,16,19,22,29};
//{18,17,16,15,14,13,13,12,12,10,10,9,9,8,7,7,6,6,5,5,5,4,4,4,4,3,3,3,3,3,3,3,3,2,2,3,2,3,2,3,2,3,2,3,2,3,2,1};
//////////////////////////////////////////////////////////////////////////

volatile float coil_len = 25.4; //units (mm)
volatile float norm_factor = (25.4 * 25.4) / 127;
volatile int old_result; //for direction of movement
volatile int PWM_value;

int main (void){

	system_init();
	clock_setup();
	port_setup();
	timer_setup_1();
	timer_setup_2();
	timer_setup_3();
	timer_setup_4();
	timer_setup_5();
	timer_setup_6();
	ADC_setup();
	
	float temp;
	for(int i = 0; i < 47; i++)
	{ 
		//temp = (0x01 * scale);
		temp = (table[i] * scale);  //enable this to deploy PWM_math(). note: PWM_math isnt ready yet but it's close.
		table_int[i] = (int)temp;
	}
	
	Port *por = PORT;
	PortGroup *
	porB = &(por->Group[1]);
	PortGroup *porA = &(por->Group[0]);
	porA->DIRSET.reg = PORT_PA27;
	while(1){}

}

void clock_setup(void){

SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET | SYSCTRL_INTFLAG_DFLLRDY;
SYSCTRL->OSC8M.bit.PRESC = 3; //divide the clock by 8 so 1MHz still
SYSCTRL->OSC8M.bit.ONDEMAND = 1; //clock is off is no peripheral request
SYSCTRL->OSC8M.bit.RUNSTDBY = 0; //clock is off in sleep mode
SYSCTRL->OSC8M.reg |= 1<<1; //enable clock
//SYSCTRL->OSC8M.bit.FRANGE = 2; //yet another way to control manipulate the clock freq

SYSCTRL->OSC32K.bit.STARTUP = 0; //start up asap
SYSCTRL->OSC32K.bit.ONDEMAND = 1; //clock is off if no peripheral request
SYSCTRL->OSC32K.bit.RUNSTDBY = 1; //clock is on in sleep mode
SYSCTRL->OSC32K.bit.EN32K = 1; //enable output
SYSCTRL->OSC32K.reg |= 1<<1; //enable clock

GCLK->CTRL.bit.SWRST = 1; //reset the generators
while (GCLK->STATUS.bit.SYNCBUSY){} //waiting for the reset to complete  

GCLK->GENDIV.reg = GCLK_GENDIV_ID(0) | GCLK_GENDIV_DIV(1); //divide generator0 by 1

GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE |
GCLK_GENCTRL_SRC_OSC8M | GCLK_GENCTRL_RUNSTDBY;
GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE |
GCLK_GENCTRL_SRC_OSC32K | GCLK_GENCTRL_RUNSTDBY;
while (GCLK->STATUS.bit.SYNCBUSY){} //waiting for sync to complete  

GCLK->CLKCTRL.reg |= 0<<14; //disable clock
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC4_TC5 | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC6_TC7 | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TCC2_TC3 | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TCC0_TCC1 | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_ADC | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14; //setup genclk for ADC
while (GCLK->STATUS.bit.SYNCBUSY==1){} //waiting for sync to complete  

PM->CPUSEL.bit.CPUDIV = 0; //divide CPU clock by 1 pg 15
PM->APBASEL.bit.APBADIV = 0; //divide apba bus by 1
PM->APBBSEL.bit.APBBDIV = 0; //divide apbb bus by 1
PM->APBCSEL.bit.APBCDIV = 0; //divide apbc bus by 1
PM->APBAMASK.reg |= 1<<3;
PM->APBCMASK.reg |= PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 | PM_APBCMASK_TC6 | PM_APBCMASK_TC7 | PM_APBCMASK_TCC0 | PM_APBCMASK_TCC2;
PM->APBCMASK.reg |= 1<<16; //enable the ADC APB
}

void port_setup(void){
Port *por = PORT;
PortGroup *porB = &(por->Group[1]);
PortGroup *porA = &(por->Group[0]);

//test bit
porA->DIRSET.reg = PORT_PA27;


//the potentiometer
porA->PMUX[2].bit.PMUXO = 1; //mux the ADC to pin PA05 (5=2*n+1) AIN[5]
porA->PINCFG[5].bit.PMUXEN = 1; //enable the MUX

//the coil1
//porA->PMUX[5].bit.PMUXE = 1; //mux the ADC to pin PA10 (10=2*n) AIN[18]
//porA->PINCFG[10].bit.PMUXEN =1; //enable the MUX

porA->PMUX[4].bit.PMUXE = 4; //mux the TCC0 wavegen PA08 PWM output
porA->PINCFG[8].bit.PMUXEN = 1; //enable the mux
porA->PMUX[4].bit.PMUXO = 4; //mux the TCC0 wavegen PA09 PWM output
porA->PINCFG[9].bit.PMUXEN = 1; //enable the mux

//porB->PMUX[15].bit.PMUXE = 4; //mux the TCC0 wavegen PB30 PWM output
//porB->PINCFG[30].bit.PMUXEN = 1; //enable the mux
//porB->PMUX[15].bit.PMUXO = 4; //mux the TCC0 wavegen PB31 PWM output
//porB->PINCFG[31].bit.PMUXEN = 1; //enable the mux


//the coil2
//porB->PMUX[2].bit.PMUXO = 1; //mux the ADC to pin PB05 (5=2*n+1) AIN[13]
//porB->PINCFG[5].bit.PMUXEN =1; //enable the MUX

porB->PMUX[5].bit.PMUXE = 4; //mux the TC5 wavegen PB10 PWM output
porB->PINCFG[10].bit.PMUXEN = 1; //enable the mux
porB->PMUX[5].bit.PMUXO = 4; //mux the TC5 wavegen PB11 PWM output
porB->PINCFG[11].bit.PMUXEN = 1; //enable the mux

//the coil3
//porB->PMUX[2].bit.PMUXE = 1; //mux the ADC to pin PB04 (4=2*n) AIN[12]
//porB>PINCFG[4].bit.PMUXEN =1; //enable the MUX

porA->PMUX[9].bit.PMUXE = 4; //mux the TC3 wavegen PA18 PWM output
porA->PINCFG[18].bit.PMUXEN = 1; //enable the mux
porA->PMUX[9].bit.PMUXO = 4; //mux the TC3 wavegen PA19 PWM output
porA->PINCFG[19].bit.PMUXEN = 1; //enable the mux

//the coil4
//porB->PMUX[3].bit.PMUXO = 1; //mux the ADC to pin PB07 (7=2*n+1) AIN[15]
//porB->PINCFG[7].bit.PMUXEN =1; //enable the MUX

porB->PMUX[1].bit.PMUXE = 4; //mux the TC6 wavegen PB02 PWM output
porB->PINCFG[2].bit.PMUXEN = 1; //enable the mux
porB->PMUX[1].bit.PMUXO = 4; //mux the TC6 wavegen PB03 PWM output
porB->PINCFG[3].bit.PMUXEN = 1; //enable the mux

//the coil5
//porB->PMUX[3].bit.PMUXE = 1; //mux the ADC to pin PB06 (6=2*n) AIN[14]
//porB->PINCFG[6].bit.PMUXEN =1; //enable the MUX

porB->PMUX[0].bit.PMUXE = 4; //mux the TC7 wavegen PB00 PWM output
porB->PINCFG[0].bit.PMUXEN = 1; //enable the mux
porB->PMUX[0].bit.PMUXO = 4; //mux the TC7 wavegen PB01 PWM output
porB->PINCFG[1].bit.PMUXEN = 1; //enable the mux

//the coil6
//porA->PMUX[5].bit.PMUXO = 1; //mux the ADC to pin PA11 (11=2*n+1) AIN[19]
//porA->PINCFG[11].bit.PMUXEN =1; //enable the MUX

porB->PMUX[6].bit.PMUXE = 4; //mux the TC4 wavegen PB12 PWM output
porB->PINCFG[12].bit.PMUXEN = 1; //enable the mux
porB->PMUX[6].bit.PMUXO = 4; //mux the TC4 wavegen PB13 PWM output
porB->PINCFG[13].bit.PMUXEN = 1; //enable the mux
}

void wait(volatile int d){
int count = 0;
while (count < d*1000){
count++;
}
}

//coil3
void timer_setup_1(void){
Tc *tc = TC3;
TcCount8 *tc3 = &tc->COUNT8;
tc3->CTRLA.reg = 0; //disable the TC3
while(tc3->STATUS.bit.SYNCBUSY){} //wait for sync of disable
tc3->CTRLA.bit.PRESCALER = 0; //divide by 1;
tc3->CTRLA.bit.WAVEGEN = 2; //normal PWM frequency per=period, CC1/CC0=compare value
tc3->CTRLA.bit.MODE = 1; //8 bit mode
tc3->PER.reg = 0x32;
tc3->CTRLC.bit.INVEN1 = 1;//invert channel 1
while(tc3->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc3->CC[0].reg = 0x19;
tc3->CC[1].reg = 0x19;
tc3->CTRLBSET.bit.ONESHOT = 0; //turn off one shot mode
while(tc3->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc3->CTRLA.reg |= 1<<1; //enable the TC3
while(tc3->STATUS.bit.SYNCBUSY){} //wait for sync of disable
}

//coil6
void timer_setup_2(void){
Tc *tc = TC4;
TcCount8 *tc4 = &tc->COUNT8;
tc4->CTRLA.reg = 0; //disable the TC4
while(tc4->STATUS.bit.SYNCBUSY){} //wait for sync of disable
tc4->CTRLA.bit.PRESCALER = 0; //divide by 1;
tc4->CTRLA.bit.WAVEGEN = 2; //normal PWM frequency per=period, CC1/CC0=compare value
tc4->CTRLA.bit.MODE = 1; //8 bit mode
tc4->PER.reg = 0x32;
tc4->CTRLC.bit.INVEN1 = 1;//invert channel 1
while(tc4->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc4->CC[0].reg = 0x19;
tc4->CC[1].reg = 0x19;
tc4->CTRLBSET.bit.ONESHOT = 0; //turn off one shot mode
while(tc4->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc4->CTRLA.reg |= 1<<1; //enable the TC4
while(tc4->STATUS.bit.SYNCBUSY){} //wait for sync of disable
}

//coil2
void timer_setup_3(void){
Tc *tc = TC5;
TcCount8 *tc5 = &tc->COUNT8;
tc5->CTRLA.reg = 0; //disable the TC5
while(tc5->STATUS.bit.SYNCBUSY){} //wait for sync of disable
tc5->CTRLA.bit.PRESCALER = 0; //divide by 1;
tc5->CTRLA.bit.WAVEGEN = 2; //normal PWM frequency per=period, CC1/CC0=compare value
tc5->CTRLA.bit.MODE = 1; //8 bit mode
tc5->PER.reg = 0x32;
tc5->CTRLC.bit.INVEN1 = 1;//invert channel 1
while(tc5->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc5->CC[0].reg = 0x19;
tc5->CC[1].reg = 0x19;
tc5->CTRLBSET.bit.ONESHOT = 0; //turn off one shot mode
while(tc5->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc5->CTRLA.reg |= 1<<1; //enable the TC5
while(tc5->STATUS.bit.SYNCBUSY){} //wait for sync of disable
}

//coil4
void timer_setup_4(void){
Tc *tc = TC6;
TcCount8 *tc6 = &tc->COUNT8;
tc6->CTRLA.reg = 0; //disable the TC6
while(tc6->STATUS.bit.SYNCBUSY){} //wait for sync of disable
tc6->CTRLA.bit.PRESCALER = 0; //divide by 1;
tc6->CTRLA.bit.WAVEGEN = 2; //normal PWM frequency per=period, CC1/CC0=compare value
tc6->CTRLA.bit.MODE = 1; //8 bit mode
tc6->PER.reg = 0x32;
tc6->CTRLC.bit.INVEN1 = 1;//invert channel 1
while(tc6->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc6->CC[0].reg = 0x19;
tc6->CC[1].reg = 0x19;
tc6->CTRLBSET.bit.ONESHOT = 0; //turn off one shot mode
while(tc6->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc6->CTRLA.reg |= 1<<1; //enable the TC6
while(tc6->STATUS.bit.SYNCBUSY){} //wait for sync of disable
}

//coil5
void timer_setup_5(void){
Tc *tc = TC7;
TcCount8 *tc7 = &tc->COUNT8;
tc7->CTRLA.reg = 0; //disable the TC7
while(tc7->STATUS.bit.SYNCBUSY){} //wait for sync of disable
tc7->CTRLA.bit.PRESCALER = 0; //divide by 1;
tc7->CTRLA.bit.WAVEGEN = 2; //normal PWM frequency per=period, CC1/CC0=compare value
tc7->CTRLA.bit.MODE = 1; //8 bit mode
tc7->PER.reg = 0x32;
tc7->CTRLC.bit.INVEN1 = 1;//invert channel 1
while(tc7->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc7->CC[0].reg = 0x19;
tc7->CC[1].reg = 0x19;
tc7->CTRLBSET.bit.ONESHOT = 0; //turn off one shot mode
while(tc7->STATUS.bit.SYNCBUSY){} //wait for sync to complete
tc7->CTRLA.reg |= 1<<1; //enable the TC7
while(tc7->STATUS.bit.SYNCBUSY){} //wait for sync of disable
}
//coil1 using TCC0
void timer_setup_6(void){
Tcc *tcc = TCC0;
tcc->CTRLA.reg |= 0<<1; //disable the TCC0
while(tcc->SYNCBUSY.reg){} //wait for sync of disable
//tcc->WAVE.bit.WAVEGEN = 2; //normal PWM frequency per=period, CC1/CC0=compare value
tcc->WAVE.reg = TCC_WAVE_WAVEGEN_NPWM;
tcc->PER.reg = 0x32;
tcc->DRVCTRL.bit.INVEN1 = 1;//invert channel 1
while(tcc->SYNCBUSY.reg){} //wait for sync of disable
tcc->CC[0].reg = 0x19;
tcc->CC[1].reg = 0x19;
tcc->CTRLBSET.bit.ONESHOT = 0; //turn off one shot mode
while(tcc->SYNCBUSY.reg){} //wait for sync of disable
tcc->CTRLA.reg |= 1<<1; //enable the TCC0
while(tcc->SYNCBUSY.reg){} //wait for sync of disable
}


void ADC_setup(void){
ADC->CTRLA.reg = 0<<1; //disable so that we can reset
while (ADC->STATUS.bit.SYNCBUSY==1){} //wait for disable to complete
ADC->CTRLA.bit.SWRST = 1; //reset
while (ADC->STATUS.bit.SYNCBUSY==1){} //wait for reset to complete
ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1; //internal reference = .5VDDann
ADC->AVGCTRL.bit.SAMPLENUM = 3; //take 2^n samples for averaging
ADC->AVGCTRL.bit.ADJRES = 3; //divsion needed for averaging must be the same value as samplenum
ADC->CTRLB.reg = ADC_CTRLB_RESSEL_16BIT | 0<<0; //for averaging need 16bit
ADC->CTRLB.bit.PRESCALER = 0; //no division
ADC->CTRLB.bit.FREERUN  = 0; //single shot conversion on
while (ADC->STATUS.bit.SYNCBUSY==1){} //wait for sync to complete
ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_PIN5; //pin5=AIN5=pot
ADC->INPUTCTRL.bit.GAIN = 0xF; //gain = 1/2
while (ADC->STATUS.bit.SYNCBUSY==1){} //wait for sync to complete

ADC->SWTRIG.bit.START = 1; //start conversion needed for first conversion in freerun mode
while (ADC->STATUS.bit.SYNCBUSY==1){} //wait for sync to complete
ADC->INTENSET.reg = ADC_INTENSET_RESRDY; //setup interrupt when reg is ready to be read
ADC->CTRLA.reg |= 1<<1; //enable ADC
while (ADC->STATUS.bit.SYNCBUSY==1){} //wait for enable to complete
NVIC->ISER[0] |= 1<<23; //enable the NVIC handler

}



//potentiometer
void ADC_Handler(void){
    result = ADC->RESULT.reg;
ADC->SWTRIG.bit.START = 1; //start conversion needed for first conversion in freerun mode
convert();
}

void convert(void){
volatile float V_diff;
volatile float ref_V;
volatile float value_V;
volatile int  ref_OHM;
volatile int value_OHM;
volatile int OHM_travel;
Port *por = PORT;
PortGroup *porA = &(por->Group[0]);

ref_V = 3.3 * ref_ADC_value / 4095;
ref_OHM = ref_V * R1 / (3.3 - ref_V);
value_V = 3.3 * result / 4095;
value_OHM = value_V * R1 / (3.3 - value_V);
OHM_travel = value_OHM - ref_OHM;
distance = OHM_travel *mm_per_OHM1; //units (mm) distance of 0 means furthest away form coil

  generate_PWM();
}

void generate_PWM(void){

static short which_way = 0;

Tc *t3 = TC3;
TcCount8 *tc3 = &t3->COUNT8;
Tc *t4 = TC4;
TcCount8 *tc4 = &t4->COUNT8;
Tc *t5 = TC5;
TcCount8 *tc5 = &t5->COUNT8;
Tc *t6 = TC6;
TcCount8 *tc6 = &t6->COUNT8;
Tc *t7 = TC7;
TcCount8 *tc7 = &t7->COUNT8;
Tcc *tcc = TCC0;

if (which_way == 0)
{
	/*if(distance<0 && distance>-p){
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = pull2;
		tc3->CC[1].reg = pull2;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }*/

	if(distance<p/2 && distance>0){
		tcc->CC[0].bit.CC = PWM_math(p/2 + distance, pull_cmd1);//pull1;
		tcc->CC[1].bit.CC = PWM_math(p/2 + distance, pull_cmd1);//pull1;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = PWM_math(p/2-distance, push_cmd2);//push2;
		tc3->CC[1].reg = PWM_math(p/2-distance, push_cmd2);//push2;

		tc6->CC[0].reg = PWM_math(distance, pull_cmd2);//pull2;
		tc6->CC[1].reg = PWM_math(distance, pull_cmd2);//pull2;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }

	else if(distance<p && distance>p/2){
		tcc->CC[0].bit.CC = PWM_math(3*p/2 - distance, push_cmd1);//off;
		tcc->CC[1].bit.CC = PWM_math(3*p/2 - distance, push_cmd1);//off;

		tc5->CC[0].reg = PWM_math(distance - p/2, pull_cmd1);//pull1;
		tc5->CC[1].reg = PWM_math(distance - p/2, pull_cmd1);//pull1;

		tc3->CC[0].reg = PWM_math(p - distance, push_cmd2);//push2;
		tc3->CC[1].reg = PWM_math(p - distance, push_cmd2);//push2;

		tc6->CC[0].reg = PWM_math(distance, pull_cmd2);//pull2;
		tc6->CC[1].reg = PWM_math(distance, pull_cmd2);//pull2;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }

	else if(distance<3*p/2 && distance>p){
		tcc->CC[0].bit.CC = PWM_math(3*p/2 - distance, push_cmd1);//push1;
		tcc->CC[1].bit.CC = PWM_math(3*p/2 - distance, push_cmd1);//push1;

		tc5->CC[0].reg = PWM_math(distance - p/2, pull_cmd1);//pull1;
		tc5->CC[1].reg = PWM_math(distance - p/2, pull_cmd1);//pull1;

		tc3->CC[0].reg = off;
		tc3->CC[1].reg = off;

		tc6->CC[0].reg = PWM_math(2*p - distance, push_cmd2);//push2;//off;
		tc6->CC[1].reg = PWM_math(2*p - distance, push_cmd2);//push2;//off;

		tc7->CC[0].reg = PWM_math(distance - p, pull_cmd2);//pull2;
		tc7->CC[1].reg = PWM_math(distance - p, pull_cmd2);//pull2;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }

	else if(distance<2*p && distance>3*p/2){
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = PWM_math(5*p/2 - distance, push_cmd1);//push1;//off;
		tc5->CC[1].reg = PWM_math(5*p/2 - distance, push_cmd1);//push1;//off;

		tc3->CC[0].reg = PWM_math(distance - 3*p/2, pull_cmd1);//pull1;
		tc3->CC[1].reg = PWM_math(distance - 3*p/2, pull_cmd1);//pull1;

		tc6->CC[0].reg = PWM_math(2*p - distance, push_cmd2);//push2;
		tc6->CC[1].reg = PWM_math(2*p - distance, push_cmd2);//push2;

		tc7->CC[0].reg = PWM_math(distance - p, pull_cmd2);//pull2;
		tc7->CC[1].reg = PWM_math(distance - p, pull_cmd2);//pull2;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }

	else if(distance<5*p/2 && distance>2*p){
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = PWM_math(5*p/2 - distance, push_cmd1);//push1;
		tc5->CC[1].reg = PWM_math(5*p/2 - distance, push_cmd1);//push1;

		tc3->CC[0].reg = PWM_math(distance - 3*p/2, pull_cmd1);//pull1;
		tc3->CC[1].reg = PWM_math(distance - 3*p/2, pull_cmd1);//pull1;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = PWM_math(p/2 - (distance - 3*p), push_cmd2);//push2;//off;
		tc7->CC[1].reg = PWM_math(p/2 - (distance - 3*p), push_cmd2);//push2;//off;

		tc4->CC[0].reg = PWM_math(distance - 2*p, pull_cmd2);//pull2;
		tc4->CC[1].reg = PWM_math(distance - 2*p, pull_cmd2);}//pull2; }

	else if(distance<3*p && distance>5*p/2){
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = PWM_math(distance - 7*p/2, push_cmd1);//push1;//off;
		tc3->CC[1].reg = PWM_math(distance - 7*p/2, push_cmd1);//push1;//off;

		tc6->CC[0].reg = PWM_math(distance - 5*p/2, pull_cmd1);//pull1;
		tc6->CC[1].reg = PWM_math(distance - 5*p/2, pull_cmd1);//pull1;

		tc7->CC[0].reg = PWM_math(p/2 - (distance - 3*p), push_cmd2);//push2;
		tc7->CC[1].reg = PWM_math(p/2 - (distance - 3*p), push_cmd2);//push2;

		tc4->CC[0].reg = PWM_math(distance - 2*p, pull_cmd2);//pull2;
		tc4->CC[1].reg = PWM_math(distance - 2*p, pull_cmd2);//pull2;
		
		which_way=1;}

	else if(distance<7*p/2 && distance>3*p){
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = PWM_math(distance - 7*p/2, push_cmd1);//push1;
		tc3->CC[1].reg = PWM_math(distance - 7*p/2, push_cmd1);//push1;

		tc6->CC[0].reg = PWM_math(distance - 5*p/2, pull_cmd1);//pull1;
		tc6->CC[1].reg = PWM_math(distance - 5*p/2, pull_cmd1);//pull1;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = PWM_math(4*p - distance, push_cmd2);//push2;//off;
		tc4->CC[1].reg = PWM_math(4*p - distance, push_cmd2);//push2;//off; }
		
		which_way=1;}

	else if(distance<4*p && distance>7*p/2){
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = off;
		tc3->CC[1].reg = off;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = PWM_math(distance - 7*p/2, pull_cmd1);//pull1;
		tc7->CC[1].reg = PWM_math(distance - 7*p/2, pull_cmd1);//pull1;

		tc4->CC[0].reg = PWM_math(4*p - distance, push_cmd2);//push2;
		tc4->CC[1].reg = PWM_math(4*p - distance, push_cmd2);//push2; 
		
		which_way=1;}

	else{
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = off;
		tc3->CC[1].reg = off;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off;}
	}

else if (which_way == 1)
	{
	/*if(distance<0 && distance>-p){
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = pull2;
		tc3->CC[1].reg = pull2;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; 
		
		which_way=0;}*/

	if(distance<p/2 && distance>0){	//double checked
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = PWM_math(p - distance, pull_cmd2);//pull2;
		tc3->CC[1].reg = PWM_math(p - distance, pull_cmd2);//pull2;

		tc6->CC[0].reg = PWM_math(distance, push_cmd2);//push2;
		tc6->CC[1].reg = PWM_math(distance, push_cmd2);//push2;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; 
		
		which_way=0;}

	else if(distance<p && distance>p/2){	//double checked
		tcc->CC[0].bit.CC = PWM_math(3*p/2 - distance, pull_cmd1);//pull1;
		tcc->CC[1].bit.CC = PWM_math(3*p/2 - distance, pull_cmd1);//pull1;

		tc5->CC[0].reg = PWM_math(distance - p/2, push_cmd1);//push1;
		tc5->CC[1].reg = PWM_math(distance - p/2, push_cmd1);//push1;

		tc3->CC[0].reg = PWM_math(p - distance, pull_cmd2);//pull2;
		tc3->CC[1].reg = PWM_math(p - distance, pull_cmd2);//pull2;

		tc6->CC[0].reg = PWM_math(distance, push_cmd2);//off;
		tc6->CC[1].reg = PWM_math(distance, push_cmd2);//off;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }

	else if(distance<3*p/2 && distance>p){	//double checked
		tcc->CC[0].bit.CC = PWM_math(3*p/2 - distance, pull_cmd1);//pull1;
		tcc->CC[1].bit.CC = PWM_math(3*p/2 - distance, pull_cmd1);//pull1;

		tc5->CC[0].reg = PWM_math(distance - p/2, push_cmd1);//off;
		tc5->CC[1].reg = PWM_math(distance - p/2, push_cmd1);//off;

		tc3->CC[0].reg = off;
		tc3->CC[1].reg = off;

		tc6->CC[0].reg = PWM_math(2*p - distance, pull_cmd2);//pull2;
		tc6->CC[1].reg = PWM_math(2*p - distance, pull_cmd2);//pull2;

		tc7->CC[0].reg = PWM_math(distance - p, push_cmd2);//push2;
		tc7->CC[1].reg = PWM_math(distance - p, push_cmd2);//push2;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }

	else if(distance<2*p && distance>3*p/2){	//double checked
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = PWM_math(5*p/2 - distance, pull_cmd1);//pull1;
		tc5->CC[1].reg = PWM_math(5*p/2 - distance, pull_cmd1);//pull1;

		tc3->CC[0].reg = PWM_math(3*p/2 - distance, push_cmd1);//push1;
		tc3->CC[1].reg = PWM_math(3*p/2 - distance, push_cmd1);//push1;

		tc6->CC[0].reg = PWM_math(2*p - distance, pull_cmd2);//pull2;
		tc6->CC[1].reg = PWM_math(2*p - distance, pull_cmd2);//pull2;

		tc7->CC[0].reg = PWM_math(distance - p, push_cmd2);//off;
		tc7->CC[1].reg = PWM_math(distance - p, push_cmd2);//off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }

	else if(distance<5*p/2 && distance>2*p){	//double checked
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = PWM_math(5*p/2 - distance, pull_cmd1);//pull1;
		tc5->CC[1].reg = PWM_math(5*p/2 - distance, pull_cmd1);//pull1;

		tc3->CC[0].reg = PWM_math(3*p/2 - distance, push_cmd1);//off;
		tc3->CC[1].reg = PWM_math(3*p/2 - distance, push_cmd1);//off;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = PWM_math(3*p - distance, pull_cmd2);//pull2;
		tc7->CC[1].reg = PWM_math(3*p - distance, pull_cmd2);//pull2;

		tc4->CC[0].reg = PWM_math(distance - 2*p, push_cmd2);//push2;
		tc4->CC[1].reg = PWM_math(distance - 2*p, push_cmd2);}//push2; }

	else if(distance<3*p && distance>5*p/2){	//double checked
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = PWM_math(3*p/2 - distance, pull_cmd1);//pull1;
		tc3->CC[1].reg = PWM_math(3*p/2 - distance, pull_cmd1);//pull1;

		tc6->CC[0].reg = PWM_math(distance - 5*p/2, push_cmd1);//push1;
		tc6->CC[1].reg = PWM_math(distance - 5*p/2, push_cmd1);//push1;

		tc7->CC[0].reg = PWM_math(3*p - distance, pull_cmd2);//pull2;
		tc7->CC[1].reg = PWM_math(3*p - distance, pull_cmd2);//pull2;

		tc4->CC[0].reg = PWM_math(distance - 2*p, push_cmd2);//off;
		tc4->CC[1].reg = PWM_math(distance - 2*p, push_cmd2);//off;
		}

	else if(distance<7*p/2 && distance>3*p){	//double checked
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = PWM_math(7*p/2 - distance, pull_cmd1);//pull1;
		tc3->CC[1].reg = PWM_math(7*p/2 - distance, pull_cmd1);//pull1;

		tc6->CC[0].reg = PWM_math(distance - 5*p/2, push_cmd1);//off;
		tc6->CC[1].reg = PWM_math(distance - 5*p/2, push_cmd1);//off;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = PWM_math(4*p - distance, pull_cmd2);//pull2;
		tc4->CC[1].reg = PWM_math(4*p - distance, pull_cmd2);}//pull2; }	

	else if(distance<4*p && distance>7*p/2){	//double checked
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = off;
		tc3->CC[1].reg = off;

		tc6->CC[0].reg = PWM_math(9*p/2 - distance, pull_cmd1);//pull1;
		tc6->CC[1].reg = PWM_math(9*p/2 - distance, pull_cmd1);//pull1;

		tc7->CC[0].reg = PWM_math(distance - 7*p/2, push_cmd1);//push1;
		tc7->CC[1].reg = PWM_math(distance - 7*p/2, push_cmd1);//push1;

		tc4->CC[0].reg = PWM_math(4*p - distance, pull_cmd2);//pull2;
		tc4->CC[1].reg = PWM_math(4*p - distance, pull_cmd2);}//pull2; }  

	else{
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = off;
		tc3->CC[1].reg = off;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; }
	}
	else if (which_way == 2)
	{
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = pull2;
		tc3->CC[1].reg = pull2;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = off;
		tc4->CC[1].reg = off; 
	}
	else if (which_way == 3)
	{
		tcc->CC[0].bit.CC = off;
		tcc->CC[1].bit.CC = off;

		tc5->CC[0].reg = off;
		tc5->CC[1].reg = off;

		tc3->CC[0].reg = off;
		tc3->CC[1].reg = off;

		tc6->CC[0].reg = off;
		tc6->CC[1].reg = off;

		tc7->CC[0].reg = off;
		tc7->CC[1].reg = off;

		tc4->CC[0].reg = pull2;
		tc4->CC[1].reg = pull2; 
	}

else{
	tcc->CC[0].bit.CC = off;
	tcc->CC[1].bit.CC = off;

	tc5->CC[0].reg = off;
	tc5->CC[1].reg = off;

	tc3->CC[0].reg = off;
	tc3->CC[1].reg = off;

	tc6->CC[0].reg = off;
	tc6->CC[1].reg = off;

	tc7->CC[0].reg = off;
	tc7->CC[1].reg = off;

	tc4->CC[0].reg = off;
	tc4->CC[1].reg = off; 
	
	which_way = 0;}
}

int PWM_math(float dist, short direction)
{
	int out;
	int dist_int;
	if (dist < 0 || dist > 48)
	{
		return 0x19;
	}
	else
	{
		dist_int = (int)dist;
		if (direction == 1)
		{
			out = 0x19 - table_int[dist_int];
			if (out < 0x00)
			{
				return 0x00;
			}
			else
			{
				return out;
			}
		}
		else if (direction == 0)
		{
			out = 0x19 + table_int[dist_int];
			if (out > 0x32)
			{
				return 0x32;
			}
			else
			{
				return out;
			}
		}
		else
		{return 0x19;}
	}
}